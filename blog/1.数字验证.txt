eclipse dvt


【数字验证工程师】：
    1.soc集成验证、系统验证
    2.bt/子系统的功能验证：
      1.1分解测试点
      1.1验证语言（systemverilog、systemc）
      1.2验证方法学（uvm）搭建验证平台
      1.3vcs、verdi，调试debug
      1.4写case调试，覆盖全部的功能点，做完全的自动比对
      1.5回归收敛
    3.门级仿真、后仿
      2.1功能时序约束sdf文件
    4.形式验证formality
    5.非标准模块vip开发和手册开发，标准VIP和供应商沟通
    6.断言开发
    7.HVP
    8.BFM总线功能模型
    9.写脚本



================= SystemVerilog
1.SVA assertion: AIP
open source OVL library: bind OVL with rtl

可做formal验证和simulate验证

- immediate assertion: print error statements if dout contains unkowns
  - Unknown_dout: assert(!$isunkown(dut.cb.dout))
		  else $error("error");
- concurrent assertion
  - Reset: assert property(
			@(posedge clk) $rose(rstn) |-> not (##[0:14] ~$(frame_n))
			)
	else $fatal(1, "Fatal");

================= Universal Verification Methodology
1.将interface set到uvm test class中，需要定义virtual interface类型。因为interface是一个实际的物理接口。

================= 搭建tb技巧
1. 在Makefile或filelist中使用+define+
	相当于在verilog中使用`ifdef宏定义

2. 寄存器读写：先读后写的思想
	// 0x4502_0020[5:0]写0x3
	read_reg(32'h4502_0020, rf_value);	//先读出来
	rf_value = rf_value & ~(32'b111111);	//将需要写入的位和0相与（设为0）
	rf_value = rf_value | 32'h3;		//将其和需要写入的数相或
	//write_ref(32'h4502_0020, rf_value);	//写进去

	// 0x4502_c628[11:10]写0x2， 0x4502c628[23:12]写0x32c
	read_reg(32'h4502_c628, rf_value);
	rf_value = rf_value & ~(32'b11<<10) & ~(32'h1111_1111_1111<<12);
	rf_value = rf_value & 0x2<<10 & 0x32c<<12;
	write_reg(32'h4502_0628, rf_value);

3. ================= verdi
verdi -sswr *.rc。//restore signals
